# {
#   "output": [
#     "import requests\nimport json\n\ndef chat_messages(api_key, query):\n    url = f'{props.appDetail.api_base_url}/chat-messages'\n\n    headers = {\n        'Authorization': f'Bearer {api_key}',\n        'Content-Type': 'application/json'\n    }\n\n    payload = {\n        \"inputs\": {\n            \"name\": \"dify\"\n        },\n        \"query\": query,\n        \"conversation_id\": \"101b4c97-fc2e-463c-90b1-5261a4cdcafb\",\n        \"response_mode\": \"streaming\",\n        \"user\": \"abc-123\"\n    }\n\n    response = requests.post(url, json=payload, headers=headers)\n\n    if response.status_code == 200:\n        return response.json()\n    else:\n        return None, response.text\n\nif __name__ == \"__main__\":\n    # Replace '{api_key}' with your actual API key\n    query = \"What are the specs of the iPhone 13 Pro Max?\"\n    api_key = '{api_key}'  # Replace with your actual API key\n\n    result = chat_messages(api_key, query)\n\n    if result:\n        print(\"Success:\", result)\n    else:\n        print(\"Request failed with error:\", result[1])",
#     "import requests\n\ndef upload_file(api_key, file_path):\n    url = f'{props.appDetail.api_base_url}/files/upload'\n\n    headers = {\n        'Authorization': f'Bearer {api_key}'\n    }\n\n    files = {\n        'file': open(file_path, 'rb')\n    }\n\n    response = requests.post(url, headers=headers, files=files)\n\n    if response.status_code == 200:\n        return response.json()\n    else:\n        return None, response.text\n\nif __name__ == \"__main__\":\n    api_key = '{api_key}'  # Replace with your actual API key\n    file_path = '/path/to/file'  # Path to your local file\n\n    result = upload_file(api_key, file_path)\n\n    if result:\n        print(\"Success:\", result)\n    else:\n        print(\"Request failed with error:\", result[1])",
#     "import requests\nimport json\n\ndef stop_task(api_base_url, task_id, api_key):\n    url = f'{api_base_url}/chat-messages/{task_id}/stop'\n    \n    headers = {\n        'Authorization': f'Bearer {api_key}',\n        'Content-Type': 'application/json'\n    }\n    \n    payload = {\n        \"user\": \"abc-123\"\n    }\n    \n    response = requests.post(url, json=payload, headers=headers)\n    \n    if response.status_code == 200:\n        return response.json()\n    else:\n        return None, response.text\n\nif __name__ == \"__main__\":\n    api_base_url = '{props.appDetail.api_base_url}'\n    task_id = \"your_task_id_here\"\n    api_key = \"{api_key}\"\n    \n    result = stop_task(api_base_url, task_id, api_key)\n    \n    if result:\n        print(\"Success:\", result)\n    else:\n        print(\"Request failed with error:\", result[1])",
#     "import requests\nimport json\n\ndef feedbacks(message_id, api_key, rating, user):\n    url = f'{props.appDetail.api_base_url}/messages/{message_id}/feedbacks'\n    \n    headers = {\n        'Authorization': f'Bearer {api_key}',\n        'Content-Type': 'application/json'\n    }\n    \n    payload = {\n        \"rating\": rating,\n        \"user\": user\n    }\n    \n    response = requests.post(url, json=payload, headers=headers)\n    \n    if response.status_code == 200:\n        return response.json()\n    else:\n        return None, response.text\n\nif __name__ == \"__main__\":\n    message_id = \"your_message_id_here\"\n    api_key = \"{api_key}\"  # Replace with your actual API key\n    rating = \"like\"\n    user = \"abc-123\"\n    \n    result = feedbacks(message_id, api_key, rating, user)\n    \n    if result:\n        print(\"Success:\", result)\n    else:\n        print(\"Request failed with error:\", result[1])",
#     "import requests\n\ndef get_suggested_responses(message_id, api_key):\n    url = f'{props.appDetail.api_base_url}/messages/{message_id}/suggested'\n\n    headers = {\n        'Authorization': f'Bearer {api_key}',\n        'Content-Type': 'application/json'\n    }\n\n    response = requests.get(url, headers=headers)\n\n    if response.status_code == 200:\n        return response.json()\n    else:\n        return None, response.text\n\nif __name__ == \"__main__\":\n    message_id = \"your_message_id_here\"\n    api_key = \"ENTER-YOUR-SECRET-KEY\"\n\n    suggested_responses = get_suggested_responses(message_id, api_key)\n\n    if suggested_responses:\n        print(\"Success:\", suggested_responses)\n    else:\n        print(\"Request failed with error:\", suggested_responses[1])",
#     "import requests\n\ndef query_messages(user, conversation_id, api_key):\n    url = f'{props.appDetail.api_base_url}/messages?user={user}&conversation_id={conversation_id}'\n    \n    headers = {\n        'Authorization': f'Bearer {api_key}'\n    }\n    \n    response = requests.get(url, headers=headers)\n    \n    if response.status_code == 200:\n        return response.json()\n    else:\n        return None, response.text\n\nif __name__ == \"__main__\":\n    user = \"abc-123\"\n    conversation_id = \"\"  # Provide an actual conversation ID if needed\n    api_key = \"{api_key}\"  # Replace with your actual API key\n    \n    messages = query_messages(user, conversation_id, api_key)\n    \n    if messages:\n        print(\"Success:\", messages)\n    else:\n        print(\"Request failed with error:\", messages[1])",
#     "import requests\n\ndef get_conversations(api_key, user):\n    url = f'{props.appDetail.api_base_url}/conversations?user={user}&last_id=&limit=20'\n    \n    headers = {\n        'Authorization': f'Bearer {api_key}'\n    }\n    \n    response = requests.get(url, headers=headers)\n    \n    if response.status_code == 200:\n        return response.json()\n    else:\n        return None, response.text\n\nif __name__ == \"__main__\":\n    api_key = \"{api_key}\"  # Replace with your actual API key\n    user = \"abc-123\"\n    \n    conversations = get_conversations(api_key, user)\n    \n    if conversations:\n        print(\"Success:\", conversations)\n    else:\n        print(\"Request failed with error:\", conversations[1])",
#     "import requests\nimport json\n\ndef delete_conversation(api_base_url, conversation_id, api_key, user):\n    url = f'{api_base_url}/conversations/{conversation_id}'\n    \n    headers = {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': f'Bearer {api_key}'\n    }\n    \n    payload = {\n        \"user\": user\n    }\n    \n    response = requests.delete(url, json=payload, headers=headers)\n    \n    if response.status_code == 200:\n        return response.json()\n    else:\n        return None, response.text\n\nif __name__ == \"__main__\":\n    api_base_url = '{props.appDetail.api_base_url}'\n    conversation_id = '{convsation_id}'\n    api_key = '{api_key}'\n    user = 'abc-123'\n    \n    result = delete_conversation(api_base_url, conversation_id, api_key, user)\n    \n    if result:\n        print(\"Success:\", result)\n    else:\n        print(\"Request failed with error:\", result[1])",
#     "import requests\nimport json\n\ndef update_conversation_name(api_key, conversation_id):\n    url = f'{props.appDetail.api_base_url}/conversations/{conversation_id}/name'\n    \n    headers = {\n        'Authorization': f'Bearer {api_key}',\n        'Content-Type': 'application/json'\n    }\n    \n    payload = {\n        \"name\": \"\",\n        \"user\": \"abc-123\"\n    }\n    \n    response = requests.post(url, json=payload, headers=headers)\n    \n    if response.status_code == 200:\n        return response.json()\n    else:\n        return None, response.text\n\nif __name__ == \"__main__\":\n    api_key = \"{api_key}\"  # Replace with your actual API key\n    conversation_id = \":conversation_id\"  # Replace with the actual conversation ID\n    \n    result = update_conversation_name(api_key, conversation_id)\n    \n    if result:\n        print(\"Success:\", result)\n    else:\n        print(\"Request failed with error:\", result[1])",
#     "import requests\n\ndef create_conversation(api_key, file_path):\n    url = f'{props.appDetail.api_base_url}/conversations/name'\n\n    headers = {\n        'Authorization': f'Bearer {api_key}'\n    }\n\n    files = {\n        'file': open(file_path, 'rb')\n    }\n\n    response = requests.post(url, headers=headers, files=files)\n\n    if response.status_code == 200:\n        return response.json()\n    else:\n        return None, response.text\n\nif __name__ == \"__main__\":\n    api_key = '{api_key}'  # Replace with your actual API key\n    file_path = 'localfile'  # Path to your local audio file\n\n    result = create_conversation(api_key, file_path)\n\n    if result:\n        print(\"Success:\", result)\n    else:\n        print(\"Request failed with error:\", result[1])",
#     "import requests\n\ndef text_to_audio(api_key, file_name, user_id, streaming):\n    url = f'{props.appDetail.api_base_url}/text-to-audio'\n\n    headers = {\n        'Authorization': f'Bearer {api_key}'\n    }\n\n    form_data = {\n        'file': file_name,\n        'user': user_id,\n        'streaming': streaming\n    }\n\n    response = requests.post(url, headers=headers, data=form_data)\n\n    if response.status_code == 200:\n        return response.json()\n    else:\n        return None, response.text\n\nif __name__ == \"__main__\":\n    api_key = \"ENTER-YOUR-SECRET-KEY\"\n    file_name = \"你好Dify\"\n    user_id = \"abc-123\"\n    streaming = \"false\"\n\n    result = text_to_audio(api_key, file_name, user_id, streaming)\n\n    if result:\n        print(\"Success:\", result)\n    else:\n        print(\"Request failed with error:\", result[1])",
#     "import requests\n\ndef get_parameters(api_key, user):\n    url = f'{props.appDetail.api_base_url}/parameters?user={user}'\n    \n    headers = {\n        'Authorization': f'Bearer {api_key}'\n    }\n    \n    response = requests.get(url, headers=headers)\n    \n    if response.status_code == 200:\n        return response.json()\n    else:\n        return None, response.text\n\nif __name__ == \"__main__\":\n    api_key = \"{api_key}\"  # Replace with your actual API key\n    user = \"abc-123\"\n    \n    parameters = get_parameters(api_key, user)\n    \n    if parameters:\n        print(\"Success:\", parameters)\n    else:\n        print(\"Request failed with error:\", parameters[1])",
#     "import requests\n\ndef get_meta(api_key, user):\n    url = f'{props.appDetail.api_base_url}/meta?user={user}'\n    \n    headers = {\n        'Authorization': f'Bearer {api_key}'\n    }\n    \n    response = requests.get(url, headers=headers)\n    \n    if response.status_code == 200:\n        return response.json()\n    else:\n        return None, response.text\n\nif __name__ == \"__main__\":\n    api_key = \"{api_key}\"  # Replace with your actual API key\n    user = \"abc-123\"\n    \n    meta_info = get_meta(api_key, user)\n    \n    if meta_info:\n        print(\"Success:\", meta_info)\n    else:\n        print(\"Request purposes, let's print the result outside of the __main__ block.\n    if meta_info:\n        print(\"Success:\", meta_info)\n    else:\n        print(\"Request failed with error:\", meta_info[1])"
#   ]
# }

result = {
    "arg1": [
      "import requests\nimport json\n\ndef chat_messages(api_key):\n    url = f'{props.appDetail.api_base_url}/chat-messages'\n\n    headers = {\n        'Authorization': f'Bearer {api_key}',\n        'Content-Type': 'application/json'\n    }\n\n    payload = {\n        \"inputs\": {\n            \"name\": \"dify\"\n        },\n        \"query\": \"What are the specs of the iPhone 13 Pro Max?\",\n        \"conversation_id\": \"101b4c97-fc2e-463c-90b1-5261a4cdcafb\",\n        \"response_mode\": \"streaming\",\n        \"user\": \"abc-123\"\n    }\n\n    response = requests.post(url, json=payload, headers=headers)\n\n    if response.status_code == 200:\n        return response.json()\n    else:\n        return None, response.text\n\nif __name__ == \"__main__\":\n    api_key = '{api_key}'  # Replace with your actual API key\n\n    result = chat_messages(api_key)\n\n    if result:\n        print(\"Success:\", result)\n    else:\n        print(\"Request failed with error:\", result[1])",
      "import requests\n\ndef upload_file(api_key, file_path):\n    url = f'{props.appDetail.api_base_url}/files/upload'\n\n    headers = {\n        'Authorization': f'Bearer {api_key}'\n    }\n\n    files = {\n        'file': open(file_path, 'rb')\n    }\n\n    response = requests.post(url, headers=headers, files=files)\n\n    if response.status_code == 200:\n        return response.json()\n    else:\n        return None, response.text\n\nif __name__ == \"__main__\":\n    api_key = '{api_key}'  # Replace with your actual API key\n    file_path = '/path/to/file'  # Path to your local file\n\n    result = upload_file(api_key, file_path)\n\n    if result:\n        print(\"Success:\", result)\n    else:\n        print(\"Request failed with error:\", result[1])",
      "import requests\nimport json\n\ndef stop_task(api_key, task_id, user):\n    url = f'{props.appDetail.api_base_url}/chat-messages/{task_id}/stop'\n    \n    headers = {\n        'Authorization': f'Bearer {api_key}',\n        'Content-Type': 'application/json'\n    }\n    \n    payload = {\n        \"user\": user\n    }\n    \n    response = requests.post(url, json=payload, headers=headers)\n    \n    if response.status_code == 200:\n        return response.json()\n    else:\n        return None, response.text\n\nif __name__ == \"__main__\":\n    api_key = \"{api_key}\"  # Replace with your actual API key\n    task_id = \"your_task_id_here\"\n    user = \"abc-123\"\n    \n    result = stop_task(api_key, task_id, user)\n    \n    if result:\n        print(\"Success:\", result)\n    else:\n        print(\"Request failed with error:\", result[1])",
      "import requests\nimport json\n\ndef feedbacks(message_id, api_key, rating, user):\n    url = f'{props.appDetail.api_base_url}/messages/{message_id}/feedbacks'\n\n    headers = {\n        'Authorization': f'Bearer {api_key}',\n        'Content-Type': 'application/json'\n    }\n\n    payload = {\n        \"rating\": rating,\n        \"user\": user\n    }\n\n    response = requests.post(url, json=payload, headers=headers)\n\n    if response.status_code == 200:\n        return response.json()\n    else:\n        return None, response.text\n\nif __name__ == \"__main__\":\n    message_id = \"your_message_id_here\"\n    api_key = \"{api_key}\"  # Replace with your actual API key\n    rating = \"like\"\n    user = \"abc-123\"\n\n    result = feedbacks(message_id, api_key, rating, user)\n\n    if result:\n        print(\"Success:\", result)\n    else:\n        print(\"Request failed with error:\", result[1])",
      "import requests\n\ndef get_suggested_responses(message_id, api_key):\n    url = f'{props.appDetail.api_base_url}/messages/{message_id}/suggested'\n    \n    headers = {\n        'Authorization': f'Bearer {api_key}',\n        'Content-Type': 'application/json'\n    }\n    \n    response = requests.get(url, headers=headers)\n    \n    if response.status_code == 200:\n        return response.json()\n    else:\n        return None, response.text",
      "import requests\n\ndef query_messages(api_key, user):\n    url = f'{props.appDetail.api_base_url}/messages?user={user}&conversation_id='\n    \n    headers = {\n        'Authorization': f'Bearer {api_key}'\n    }\n    \n    response = requests.get(url, headers=headers)\n    \n    if response.status_code == 200:\n        return response.json()\n    else:\n        return None, response.text\n\nif __name__ == \"__main__\":\n    api_key = \"{api_key}\"  # Replace with your actual API key\n    user = \"abc-123\"\n    \n    messages = query_messages(api_key, user)\n    \n    if messages:\n        print(\"Success:\", messages)\n    else:\n        print(\"Request failed with error:\", messages[1])"
    ],
    "curls": [
      "curl -X POST '${props.appDetail.api_base_url}/chat-messages' \\\n    -H 'Authorization: Bearer {api_key}' \\\n    -H 'Content-Type: application/json' \\\n    --data-raw '{\n        \"inputs\": {\n            \"name\": \"dify\"\n        },\n        \"query\": \"What are the specs of the iPhone 13 Pro Max?\",\n        \"conversation_id\": \"101b4c97-fc2e-463c-90b1-5261a4cdcafb\",\n        \"response_mode\": \"streaming\",\n        \"user\": \"abc-123\",\n    }'",
      "curl -X POST '${props.appDetail.api_base_url}/files/upload' \\\n    --header 'Authorization: Bearer {api_key}' \\\n    --form 'file=@\"/path/to/file\"'",
      "curl -X POST '${props.appDetail.api_base_url}/chat-messages/:task_id/stop' \\\n    -H 'Authorization: Bearer {api_key}' \\\n    -H 'Content-Type: application/json' \\\n    --data-raw '{\n        \"user\": \"abc-123\"\n    }'",
      "curl -X POST '${props.appDetail.api_base_url}/messages/:message_id/feedbacks' \\\n    --header 'Authorization: Bearer {api_key}' \\\n    --header 'Content-Type: application/json' \\\n    --data-raw '{\n        \"rating\": \"like\",\n        \"user\": \"abc-123\"\n    }'",
      "curl --location --request GET '${props.appDetail.api_base_url}/messages/{message_id}/suggested' \\\n    --header 'Authorization: Bearer ENTER-YOUR-SECRET-KEY' \\\n    --header 'Content-Type: application/json' \\",
      "curl -X GET '${props.appDetail.api_base_url}/messages?user=abc-123&conversation_id='\n    --header 'Authorization: Bearer {api_key}'"
    ],
    "mdx_string": " <Col sticky>\n\n    <CodeGroup title=\"Request\" tag=\"POST\" label=\"/chat-messages\" targetCode={`curl -X POST '${props.appDetail.api_base_url}/chat-messages' \\\\\\n--header 'Authorization: Bearer {api_key}' \\\\\\n--header 'Content-Type: application/json' \\\\\\n--data-raw '{\\n    \"inputs\": ${JSON.stringify(props.inputs)},\\n    \"query\": \"What are the specs of the iPhone 13 Pro Max?\",\\n    \"response_mode\": \"streaming\",\\n    \"conversation_id\": \"\",\\n    \"user\": \"abc-123\",\\n}'`}>\n\n    ```bash {{ title: 'cURL' }}\n    curl -X POST '${props.appDetail.api_base_url}/chat-messages' \\\n    -H 'Authorization: Bearer {api_key}' \\\n    -H 'Content-Type: application/json' \\\n    --data-raw '{\n        \"inputs\": {\n            \"name\": \"dify\"\n        },\n        \"query\": \"What are the specs of the iPhone 13 Pro Max?\",\n        \"conversation_id\": \"101b4c97-fc2e-463c-90b1-5261a4cdcafb\",\n        \"response_mode\": \"streaming\",\n        \"user\": \"abc-123\",\n    }'\n    ```\n\n    </CodeGroup>\n    <CodeGroup title=\"Python Request\" targetCode={`import requests\\nimport json\\n\\ndef chat_messages(api_key, query):\\n    url = \\'${props.appDetail.api_base_url}/chat-messages\\'\\n    \\n    headers = {\\n        \\'Authorization\\': f\\'Bearer {api_key}\\',\\n        \\'Content-Type\\': \\'application/json\\'\\n    }\\n    \\n    payload = {\\n        \"inputs\": {},\\n        \"query\": query,\\n        \"response_mode\": \"blocking\",\\n        \"conversation_id\": \"\",\\n        \"user\": \"abc-123\"\\n    }\\n    \\n    response = requests.post(url, json=payload, headers=headers)\\n    \\n    if response.status_code == 200:\\n        return response.json()\\n    else:\\n        return None, response.text\\n\\nif __name__ == \"__main__\":\\n    # Replace \\'{api_key}\\' with your actual API key\\n    query = \"What are the specs of the iPhone 13 Pro Max?\"\\n    api_key = \\'{api_key}\\'  # Replace with your actual API key\\n\\n    result = chat_messages(api_key, query)\\n    \\n    if result:\\n        print(\"Success:\", result)\\n    else:\\n        print(\"Request failed with error:\", result[1])`}>\n      ```python\n      ```\n    </CodeGroup>\n    ### 阻塞模式\n    <CodeGroup title=\"Response\">\n    ```json {{ title: 'Response' }}\n    {\n        \"event\": \"message\",\n        \"message_id\": \"9da23599-e713-473b-982c-4328d4f5c78a\",\n        \"conversation_id\": \"45701982-8118-4bc5-8e9b-64562b4555f2\",\n        \"mode\": \"chat\",\n        \"answer\": \"iPhone 13 Pro Max specs are listed heere:...\",\n        \"metadata\": {\n            \"usage\": {\n                \"prompt_tokens\": 1033,\n                \"prompt_unit_price\": \"0.001\",\n                \"prompt_price_unit\": \"0.001\",\n                \"prompt_price\": \"0.0010330\",\n                \"completion_tokens\": 128,\n                \"completion_unit_price\": \"0.002\",\n                \"completion_price_unit\": \"0.001\",\n                \"completion_price\": \"0.0002560\",\n                \"total_tokens\": 1161,\n                \"total_price\": \"0.0012890\",\n                \"currency\": \"USD\",\n                \"latency\": 0.7682376249867957\n            },\n            \"retriever_resources\": [\n                {\n                    \"position\": 1,\n                    \"dataset_id\": \"101b4c97-fc2e-463c-90b1-5261a4cdcafb\",\n                    \"dataset_name\": \"iPhone\",\n                    \"document_id\": \"8dd1ad74-0b5f-4175-b735-7d98bbbb4e00\",\n                    \"document_name\": \"iPhone List\",\n                    \"segment_id\": \"ed599c7f-2766-4294-9d1d-e5235a61270a\",\n                    \"score\": 0.98457545,\n                    \"content\": \"\\\"Model\\\",\\\"Release Date\\\",\\\"Display Size\\\",\\\"Resolution\\\",\\\"Processor\\\",\\\"RAM\\\",\\\"Storage\\\",\\\"Camera\\\",\\\"Battery\\\",\\\"Operating System\\\"\\n\\\"iPhone 13 Pro Max\\\",\\\"September 24, 2021\\\",\\\"6.7 inch\\\",\\\"1284 x 2778\\\",\\\"Hexa-core (2x3.23 GHz Avalanche + 4x1.82 GHz Blizzard)\\\",\\\"6 GB\\\",\\\"128, 256, 512 GB, 1TB\\\",\\\"12 MP\\\",\\\"4352 mAh\\\",\\\"iOS 15\\\"\"\n                }\n            ]\n        },\n        \"created_at\": 1705407629\n    }\n    ```\n    </CodeGroup>\n    ### 流式模式（基础助手）\n    <CodeGroup title=\"Response\">\n    ```streaming {{ title: 'Response' }}\n      data: {\"event\": \"message\", \"message_id\": \"5ad4cb98-f0c7-4085-b384-88c403be6290\", \"conversation_id\": \"45701982-8118-4bc5-8e9b-64562b4555f2\", \"answer\": \" I\", \"created_at\": 1679586595}\n      data: {\"event\": \"message\", \"message_id\": \"5ad4cb98-f0c7-4085-b384-88c403be6290\", \"conversation_id\": \"45701982-8118-4bc5-8e9b-64562b4555f2\", \"answer\": \"'m\", \"created_at\": 1679586595}\n      data: {\"event\": \"message\", \"message_id\": \"5ad4cb98-f0c7-4085-b384-88c403be6290\", \"conversation_id\": \"45701982-8118-4bc5-8e9b-64562b4555f2\", \"answer\": \" glad\", \"created_at\": 1679586595}\n      data: {\"event\": \"message\", \"message_id\": \"5ad4cb98-f0c7-4085-b384-88c403be6290\", \"conversation_id\": \"45701982-8118-4bc5-8e9b-64562b4555f2\", \"answer\": \" to\", \"created_at\": 1679586595}\n      data: {\"event\": \"message\", \"message_id\": : \"5ad4cb98-f0c7-4085-b384-88c403be6290\", \"conversation_id\": \"45701982-8118-4bc5-8e9b-64562b4555f2\", \"answer\": \" meet\", \"created_at\": 1679586595}\n      data: {\"event\": \"message\", \"message_id\": : \"5ad4cb98-f0c7-4085-b384-88c403be6290\", \"conversation_id\": \"45701982-8118-4bc5-8e9b-64562b4555f2\", \"answer\": \" you\", \"created_at\": 1679586595}\n      data: {\"event\": \"message_end\", \"id\": \"5e52ce04-874b-4d27-9045-b3bc80def685\", \"conversation_id\": \"45701982-8118-4bc5-8e9b-64562b4555f2\", \"metadata\": {\"usage\": {\"prompt_tokens\": 1033, \"prompt_unit_price\": \"0.001\", \"prompt_price_unit\": \"0.001\", \"prompt_price\": \"0.0010330\", \"completion_tokens\": 135, \"completion_unit_price\": \"0.002\", \"completion_price_unit\": \"0.001\", \"completion_price\": \"0.0002700\", \"total_tokens\": 1168, \"total_price\": \"0.0013030\", \"currency\": \"USD\", \"latency\": 1.381760165997548, \"retriever_resources\": [{\"position\": 1, \"dataset_id\": \"101b4c97-fc2e-463c-90b1-5261a4cdcafb\", \"dataset_name\": \"iPhone\", \"document_id\": \"8dd1ad74-0b5f-4175-b735-7d98bbbb4e00\", \"document_name\": \"iPhone List\", \"segment_id\": \"ed599c7f-2766-4294-9d1d-e5235a61270a\", \"score\": 0.98457545, \"content\": \"\\\"Model\\\",\\\"Release Date\\\",\\\"Display Size\\\",\\\"Resolution\\\",\\\"Processor\\\",\\\"RAM\\\",\\\"Storage\\\",\\\"Camera\\\",\\\"Battery\\\",\\\"Operating System\\\"\\n\\\"iPhone 13 Pro Max\\\",\\\"September 24, 2021\\\",\\\"6.7 inch\\\",\\\"1284 x 2778\\\",\\\"Hexa-core (2x3.23 GHz Avalanche + 4x1.82 GHz Blizzard)\\\",\\\"6 GB\\\",\\\"128, 256, 512 GB, 1TB\\\",\\\"12 MP\\\",\\\"4352 mAh\\\",\\\"iOS 15\\\"\"}]}}}\n    ```\n    </CodeGroup>\n\n    ### 流式模式（智能助手）\n    <CodeGroup title=\"Response\">\n    ```streaming {{ title: 'Response' }}\n      data: {\"event\": \"agent_thought\", \"id\": \"8dcf3648-fbad-407a-85dd-73a6f43aeb9f\", \"task_id\": \"9cf1ddd7-f94b-459b-b942-b77b26c59e9b\", \"message_id\": \"1fb10045-55fd-4040-99e6-d048d07cbad3\", \"position\": 1, \"thought\": \"\", \"observation\": \"\", \"tool\": \"\", \"tool_input\": \"\", \"created_at\": 1705639511, \"message_files\": [], \"conversation_id\": \"c216c595-2d89-438c-b33c-aae5ddddd142\"}\n      data: {\"event\": \"agent_thought\", \"id\": \"8dcf3648-fbad-407a-85dd-73a6f43aeb9f\", \"task_id\": \"9cf1ddd7-f94b-459b-b942-b77b26c59e9b\", \"message_id\": \"1fb10045-55fd-4040-99e6-d048d07cbad3\", \"position\": 1, \"thought\": \"\", \"observation\": \"\", \"tool\": \"dalle3\", \"tool_input\": \"{\\\"dalle3\\\": {\\\"prompt\\\": \\\"cute Japanese anime girl with white hair, blue eyes, bunny girl suit\\\"}}\", \"created_at\": 1705639511, \"message_files\": [], \"conversation_id\": \"c216c595-2d89-438c-b33c-aae5ddddd142\"}\n      data: {\"event\": \"message_file\", \"id\": \"d75b7a5c-ce5e-442e-ab1b-d6a5e5b557b0\", \"type\": \"image\", \"belongs_to\": \"assistant\", \"url\": \"http://127.0.0.1:5001/files/tools/d75b7a5c-ce5e-442e-ab1b-d6a5e5b557b0.png?timestamp=1705639526&nonce=70423256c60da73a9c96d1385ff78487&sign=7B5fKV9890YJuqchQvrABvW4AIupDvDvxGdu1EOJT94=\", \"conversation_id\": \"c216c595-2d89-438c-b33c-aae5ddddd142\"}\n      data: {\"event\": \"agent_thought\", \"id\": \"8dcf3648-fbad-407a-85dd-73a6f43aeb9f\", \"task_id\": \"9cf1ddd7-f94b-459b-b942-b77b26c59e9b\", \"message_id\": \"1fb10045-55fd-4040-99e6-d048d07cbad3\", \"position\": 1, \"thought\": \"\", \"observation\": \"image has been created and sent to user already, you should tell user to check it now.\", \"tool\": \"dalle3\", \"tool_input\": \"{\\\"dalle3\\\": {\\\"prompt\\\": \\\"cute Japanese anime girl with white hair, blue eyes, bunny girl suit\\\"}}\", \"created_at\": 1705639511, \"message_files\": [\"d75b7a5c-ce5e-442e-ab1b-d6a5e5b557b0\"], \"conversation_id\": \"c216c595-2d89-438c-b33c-aae5ddddd142\"}\n      data: {\"event\": \"agent_thought\", \"id\": \"67a99dc1-4f82-42d3-b354-18d4594840c8\", \"task_id\": \"9cf1ddd7-f94b-459b-b942-b77b26c59e9b\", \"message_id\": \"1fb10045-55fd-4040-99e6-d048d07cbad3\", \"position\": 2, \"thought\": \"\", \"observation\": \"\", \"tool\": \"\", \"tool_input\": \"\", \"created_at\": 1705639511, \"message_files\": [], \"conversation_id\": \"c216c595-2d89-438c-b33c-aae5ddddd142\"}\n      data: {\"event\": \"agent_message\", \"id\": \"1fb10045-55fd-4040-99e6-d048d07cbad3\", \"task_id\": \"9cf1ddd7-f94b-459b-b942-b77b26c59e9b\", \"message_id\": \"1fb10045-55fd-4040-99e6-d048d07cbad3\", \"answer\": \"I have created an image of a cute Japanese\", \"created_at\": 1705639511, \"conversation_id\": \"c216c595-2d89-438c-b33c-aae5ddddd142\"}\n      data: {\"event\": \"agent_message\", \"id\": \"1fb10045-55fd-4040-99e6-d048d07cbad3\", \"task_id\": \"9cf1ddd7-f94b-459b-b942-b77b26c59e9b\", \"message_id\": \"1fb10045-55fd-4040-99e6-d048d07cbad3\", \"answer\": \" anime girl with white hair and blue\", \"created_at\": 1705639511, \"conversation_id\": \"c216c595-2d89-438c-b33c-aae5ddddd142\"}\n      data: {\"event\": \"agent_message\", \"id\": \"1fb10045-55fd-4040-99e6-d048d07cbad3\", \"task_id\": \"9cf1ddd7-f94b-459b-b942-b77b26c59e9b\", \"message_id\": \"1fb10045-55fd-4040-99e6-d048d07cbad3\", \"answer\": \" eyes wearing a bunny girl\" ,\"created_at\": 1705639511, \"conversation_id\": \"c216c595-2d89-438c-b33c-aae5ddddd142\"}\n      data: {\"event\": \"agent_message\", \"id\": \"1fb10045-55fd-4040-99e6-d048d07cbad3\", \"task_id\": \"9cf1ddd7-f94b-459b-b942-b77b26c59e9b\", \"message_id\": \"1fb10045-55fd-4040-99e6-d048d07cbad3\", \"answer\": \" suit .\", \"created_at\": 1705639511, \"conversation_id\": \"c216c595-2d89-438c-b33c-aae5ddddd142\"}\n      data: {\"event\": \"agent_thought\", \"id\": \"67a99dc1-4f82-42d3-b354-18d4594840c8\", \"task_id\": \"9cf1ddd7-f94b-459b-b942-b77b26c59e9b\", \"message_id\": \"1fb10045-55fd-4040-99e6-d048d07cbad3\", \"position\": 2, \"thought\": \"I have created an image of a cute Japanese anime girl with white hair and blue eyes wearing a bunny girl suit.\", \"observation\": \"\", \"tool\": \"\", \"tool_input\": \"\", \"created_at\": 1705639511, \"message_files\": [], \"conversation_id\": \"c216c595-2d89-438c-b33c-aae5ddddd142\"}\n      data: {\"event\": \"message_end\", \"task_id\": \"9cf1ddd7-f94b-459b-b942-b77b26c59e9b\", \"id\": \"1fb10045-55fd-4040-99e6-d048d07cbad3\", \"message_id\": \"1fb10045-55fd-4040-99e6-d048d07cbad3\", \"conversation_id\": \"c216c595-2d89-438c-b33c-aae5ddddd142\", \"metadata\": {\"usage\": {\"prompt_tokens\": 305, \"prompt_unit_price\": \"0.001\", \"prompt_price_unit\": \"0.001\", \"prompt_price\": \"0.0003050\", \"completion_tokens\": 97, \"completion_unit_price\": \"0.002\", \"completion_price_unit\": \"0.001\", \"completion_price\": \"0.0001940\", \"total_tokens\": 184, \"total_price\": \"0.0002290\", \"currency\": \"USD\", \"latency\": 1.771092874929309}}}\n    ```\n    </CodeGroup>\n  </Col>\n</Row>\n\n---\n<Heading\n  url='/files/upload'\n  method='POST'\n  title='上传文件'\n  name='#files-upload'\n/>\n<Row>\n  <Col>\n    上传文件（目前仅支持图片）并在发送消息时使用，可实现图文多模态理解。\n    支持 png, jpg, jpeg, webp, gif 格式。\n    <i>上传的文件仅供当前终端用户使用。</i>\n\n    ### Request Body\n    该接口需使用  `multipart/form-data` 进行请求。\n    <Properties>\n      <Property name='file' type='file' key='file'>\n        要上传的文件。\n      </Property>\n      <Property name='user' type='string' key='user'>\n          用户标识，用于定义终端用户的身份，必须和发送消息接口传入 user 保持一致。\n      </Property>\n    </Properties>\n\n    ### Response\n    成功上传后，服务器会返回文件的 ID 和相关信息。\n    - `id` (uuid) ID\n    - `name` (string) 文件名\n    - `size` (int) 文件大小（byte）\n    - `extension` (string) 文件后缀\n    - `mime_type` (string) 文件 mime-type\n    - `created_by` (uuid) 上传人 ID\n    - `created_at` (timestamp) 上传时间\n\n    ### Errors\n    - 400，`no_file_uploaded`，必须提供文件\n    - 400，`too_many_files`，目前只接受一个文件\n    - 400，`unsupported_preview`，该文件不支持预览\n    - 400，`unsupported_estimate`，该文件不支持估算\n    - 413，`file_too_large`，文件太大\n    - 415，`unsupported_file_type`，不支持的扩展名，当前只接受文档类文件\n    - 503，`s3_connection_failed`，无法连接到 S3 服务\n    - 503，`s3_permission_denied`，无权限上传文件到 S3\n    - 503，`s3_file_too_large`，文件超出 S3 大小限制\n  </Col>\n  <Col sticky>\n\n    <CodeGroup title=\"Request\" tag=\"POST\" label=\"/files/upload\" targetCode={`curl -X POST '${props.appDetail.api_base_url}/files/upload' \\\\\\n--header 'Authorization: Bearer {api_key}' \\\\\\n--form 'file=@localfile;type=image/[png|jpeg|jpg|webp|gif] \\\\\\n--form 'user=abc-123'`}>\n\n    ```bash {{ title: 'cURL' }}\n    curl -X POST '${props.appDetail.api_base_url}/files/upload' \\\n    --header 'Authorization: Bearer {api_key}' \\\n    --form 'file=@\"/path/to/file\"'\n    ```\n\n    </CodeGroup>\n\n    <CodeGroup title=\"Python Request\" targetCode={`import requests\\n\\n\\ndef upload(api_key, file_path, user_id):\\n    url = '${props.appDetail.api_base_url}/files/upload'\\n\\n    headers = {\\n        'Authorization': f'Bearer {api_key}'\\n    }\\n\\n    form_data = {\\n        'user': user_id\\n    }\\n    # Create a dictionary to hold the form data\\n    files = [\\n        ('file', (file_path, open(file_path, 'rb'), 'image/png'))\\n    ]\\n\\n    # Send the POST request\\n    response = requests.post(url, headers=headers, files=files, data=form_data)\\n\\n    if response.status_code == 200:\\n        return response.json()\\n    else:\\n        return None, response.text\\n\\n\\nif __name__ == \"__main__\":\\n    api_key = '{api_key}'  # Replace with your actual API key\\n    file_path = 'path'  # Path to your local file\\n    user_id = 'abc-123'\\n\\n\\n    result = upload(api_key, file_path, user_id)\\n\\n    if result:\\n        print(\"Success:\", result)\\n    else:\\n        print(\"Request failed with error:\", result[1])`}>\n      ```python\n      ```\n    </CodeGroup>\n\n    <CodeGroup title=\"Response\">\n    ```json {{ title: 'Response' }}\n    {\n      \"id\": \"72fa9618-8f89-4a37-9b33-7e1178a24a67\",\n      \"name\": \"example.png\",\n      \"size\": 1024,\n      \"extension\": \"png\",\n      \"mime_type\": \"image/png\",\n      \"created_by\": 123,\n      \"created_at\": 1577836800,\n    }\n    ```\n    </CodeGroup>\n  </Col>\n</Row>\n---\n<Heading\n  url='/chat-messages/:task_id/stop'\n  method='POST'\n  title='停止响应'\n  name='#Stop'\n/>\n<Row>\n  <Col>\n  仅支持流式模式。\n  ### Path\n  - `task_id` (string) 任务 ID，可在流式返回 Chunk 中获取\n\n  ### Request Body\n  - `user` (string) Required\n    用户标识，用于定义终端用户的身份，必须和发送消息接口传入 user 保持一致。\n  ### Response\n  - `result` (string) 固定返回 success\n  </Col>\n  <Col sticky>\n  <CodeGroup title=\"Request\" tag=\"POST\" label=\"/chat-messages/:task_id/stop\" targetCode={`curl -X POST '${props.appDetail.api_base_url}/chat-messages/:task_id/stop' \\\\\\n-H 'Authorization: Bearer {api_key}' \\\\\\n-H 'Content-Type: application/json' \\\\\\n--data-raw '{ \"user\": \"abc-123\"}'`}>\n    ```bash {{ title: 'cURL' }}\n    curl -X POST '${props.appDetail.api_base_url}/chat-messages/:task_id/stop' \\\n    -H 'Authorization: Bearer {api_key}' \\\n    -H 'Content-Type: application/json' \\\n    --data-raw '{\n        \"user\": \"abc-123\"\n    }'\n    ```\n\n    </CodeGroup>\n\n    <CodeGroup title=\"Python Request\" targetCode={`import requests\\nimport json\\n\\ndef stop(task_id, api_key, user):\\n    url = f\\'${props.appDetail.api_base_url}/chat-messages/{task_id}/stop\\'\\n    \\n    headers = {\\n        \\'Authorization\\': f\\'Bearer {api_key}\\',\\n        \\'Content-Type\\': \\'application/json\\'\\n    }\\n    \\n    payload = {\\n        \"user\": user\\n    }\\n    \\n    response = requests.post(url, json=payload, headers=headers)\\n    \\n    if response.status_code == 200:\\n        return response.json()\\n    else:\\n        return None, response.text\\n\\nif __name__ == \"__main__\":\\n    task_id = \"your_task_id_here\"\\n    api_key = \"{api_key}\"\\n    user = \"abc-123\"\\n    \\n    result = stop(task_id, api_key, user)\\n    \\n    if result:\\n        print(\"Success:\", result)\\n    else:\\n        print(\"Request failed with error:\", result[1])`}>\n      ```python\n      ```\n    </CodeGroup>\n\n    <CodeGroup title=\"Response\">\n    ```json {{ title: 'Response' }}\n    {\n      \"result\": \"success\"\n    }\n    ```\n    </CodeGroup>\n  </Col>\n</Row>\n---\n\n<Heading\n  url='/messages/:message_id/feedbacks'\n  method='POST'\n  title='消息反馈（点赞）'\n  name='#feedbacks'\n/>\n<Row>\n  <Col>\n    消息终端用户反馈、点赞，方便应用开发者优化输出预期。\n\n    ### Path Params\n    <Properties>\n      <Property name='message_id' type='string' key='message_id'>\n       消息 ID\n      </Property>\n    </Properties>\n\n    ### Request Body\n\n    <Properties>\n      <Property name='rating' type='string' key='rating'>\n         点赞 like, 点踩 dislike,  撤销点赞 null\n      </Property>\n      <Property name='user' type='string' key='user'>\n          用户标识，由开发者定义规则，需保证用户标识在应用内唯一。\n      </Property>\n    </Properties>\n\n    ### Response\n    - `result` (string) 固定返回 success\n  </Col>\n  <Col sticky>\n\n    <CodeGroup title=\"Request\" tag=\"POST\" label=\"/messages/:message_id/feedbacks\" targetCode={`curl -X POST '${props.appDetail.api_base_url}/messages/:message_id/feedbacks \\\\\\n--header 'Authorization: Bearer {api_key}' \\\\\\n--header 'Content-Type: application/json' \\\\\\n--data-raw '{\\n    \"rating\": \"like\",\\n    \"user\": \"abc-123\"\\n}'`}>\n\n    ```bash {{ title: 'cURL' }}\n    curl -X POST '${props.appDetail.api_base_url}/messages/:message_id/feedbacks' \\\n    --header 'Authorization: Bearer {api_key}' \\\n    --header 'Content-Type: application/json' \\\n    --data-raw '{\n        \"rating\": \"like\",\n        \"user\": \"abc-123\"\n    }'\n    ```\n\n    </CodeGroup>\n\n    <CodeGroup title=\"Python Request\" targetCode={`import requests\\nimport json\\n\\ndef feedbacks(message_id, api_key, rating, user):\\n    url = f'${props.appDetail.api_base_url}/messages/{message_id}/feedbacks'\\n    \\n    headers = {\\n        'Authorization': f'Bearer {api_key}',\\n        'Content-Type': 'application/json'\\n    }\\n    \\n    payload = {\\n        \"rating\": rating,\\n        \"user\": user\\n    }\\n    \\n    response = requests.post(url, json=payload, headers=headers)\\n    \\n    if response.status_code == 200:\\n        return response.json()\\n    else:\\n        return None, response.text\\n\\nif __name__ == \"__main__\":\\n    message_id = \"your_message_id_here\"\\n    api_key = \"{api_key}\"  # Replace with your actual API key\\n    rating = \"like\"\\n    user = \"abc-123\"\\n    \\n    result = feedbacks(message_id, api_key, rating, user)\\n    \\n    if result:\\n        print(\"Success:\", result)\\n    else:\\n        print(\"Request failed with error:\", result[1])`}>\n      ```python\n      ```\n    </CodeGroup>\n\n    <CodeGroup title=\"Response\">\n    ```json {{ title: 'Response' }}\n    {\n      \"result\": \"success\"\n    }\n    ```\n    </CodeGroup>\n  </Col>\n</Row>\n\n---\n\n<Heading\n  url='/messages/{message_id}/suggested'\n  method='GET'\n  title='获取下一轮建议问题列表'\n  name='#suggested'\n/>\n<Row>\n  <Col>\n    获取下一轮建议问题列表。\n\n    ### Path Params\n\n    <Properties>\n      <Property name='message_id' type='string' key='message_id'>\n        Message ID\n      </Property>\n    </Properties>\n\n    ### Query\n    <Properties>\n      <Property name='user' type='string' key='user'>\n        用户标识，由开发者定义规则，需保证用户标识在应用内唯一。\n      </Property>\n    </Properties>\n  </Col>\n  <Col sticky>\n\n    <CodeGroup title=\"Request\" tag=\"GET\" label=\"/messages/{message_id}/suggested\" targetCode={`curl --location --request GET '${props.appDetail.api_base_url}/messages/{message_id}/suggested?user=abc-123 \\\\\\n--header 'Authorization: Bearer ENTER-YOUR-SECRET-KEY' \\\\\\n--header 'Content-Type: application/json'`}>\n\n    ```bash {{ title: 'cURL' }}\n    curl --location --request GET '${props.appDetail.api_base_url}/messages/{message_id}/suggested' \\\n    --header 'Authorization: Bearer ENTER-YOUR-SECRET-KEY' \\\n    --header 'Content-Type: application/json' \\\n    ```\n\n    </CodeGroup>\n\n    <CodeGroup title=\"Python Request\" targetCode={`import requests\\n\\ndef get_suggested_responses(message_id, api_key, user):\\n    url = f'${props.appDetail.api_base_url}/messages/{message_id}/suggested?user={user}'\\n    \\n    headers = {\\n        'Authorization': f'Bearer {api_key}',\\n        'Content-Type': 'application/json'\\n    }\\n    \\n    response = requests.get(url, headers=headers)\\n    \\n    if response.status_code == 200:\\n        return response.json()\\n    else:\\n        return None, response.text\\n\\nif __name__ == \"__main__\":\\n    message_id = \"your_message_id_here\"\\n    api_key = \"ENTER-YOUR-SECRET-KEY\"\\n    user = \"abc-123\"\\n    \\n    suggested_responses = get_suggested_responses(message_id, api_key, user)\\n    \\n    # This is where you would process the returned data.\\n    # Since we're not printing anything from __name__ == \"__main__\", \\n    # any processing or output would happen within this block without print statements.\\n    \\n    # For demonstration purposes, let's print the result outside of the __main__ block.\\n    if suggested_responses:\\n        print(\"Success:\", suggested_responses)\\n    else:\\n        print(\"Request failed with error:\", suggested_responses[1])`}>\n      ```python\n      ```\n    </CodeGroup>\n\n    <CodeGroup title=\"Response\">\n    ```json {{ title: 'Response' }}\n    {\n      \"result\": \"success\",\n      \"data\": [\n            \"a\",\n            \"b\",\n            \"c\"\n        ]\n    }\n    ```\n    </CodeGroup>\n  </Col>\n</Row>\n\n---\n\n---\n\n<Heading\n  url='/messages'\n  method='GET'\n  title='获取会话历史消息'\n  name='#messages'\n/>\n<Row>\n  <Col>\n    滚动加载形式返回历史聊天记录，第一页返回最新  `limit` 条，即：倒序返回。\n\n    ### Query\n\n    <Properties>\n      <Property name='conversation_id' type='string' key='conversation_id'>\n        会话 ID\n      </Property>\n      <Property name='user' type='string' key='user'>\n        用户标识，由开发者定义规则，需保证用户标识在应用内唯一。\n      </Property>\n      <Property name='first_id' type='string' key='first_id'>\n        当前页第一条聊天记录的 ID，默认 null\n      </Property>\n      <Property name='limit' type='int' key='limit'>\n        一次请求返回多少条聊天记录，默认 20 条。\n      </Property>\n    </Properties>\n\n    ### Response\n    - `data` (array[object])  消息列表\n    - `id`  (string) 消息 ID\n    - `conversation_id` (string)  会话 ID\n    - `inputs` (array[object]) 用户输入参数。\n    - `query`  (string) 用户输入 / 提问内容。\n    - `message_files` (array[object]) 消息文件\n      - `id` (string) ID\n      - `type` (string) 文件类型，image 图片\n      - `url` (string) 预览图片地址\n      - `belongs_to` (string) 文件归属方，user 或 assistant\n      - `agent_thoughts` (array[object]) Agent思考内容（仅Agent模式下不为空）\n        - `id` (string) agent_thought ID，每一轮Agent迭代都会有一个唯一的id\n        - `message_id` (string) 消息唯一ID\n        - `position` (int) agent_thought在消息中的位置，如第一轮迭代position为1\n        - `thought` (string) agent的思考内容\n        - `observation` (string) 工具调用的返回结果\n        - `tool` (string) 使用的工具列表，以 ; 分割多个工具\n        - `tool_input` (string) 工具的输入，JSON格式的字符串(object)。如：`{\"dalle3\": {\"prompt\": \"a cute cat\"}}`\n        - `created_at` (int) 创建时间戳，如：1705395332\n        - `message_files` (array[string])  当前agent_thought 关联的文件ID\n          - `file_id` (string) 文件ID\n        - `conversation_id` (string) 会话ID\n    - `answer` (string)  回答消息内容\n    - `created_at`  (timestamp) 创建时间\n    - `feedback` (object) 反馈信息\n      - `rating` (string) 点赞 like / 点踩 dislike\n    - `retriever_resources` (array[RetrieverResource]) 引用和归属分段列表\n  - `has_more` (bool) 是否存在下一页\n  - `limit` (int) 返回条数，若传入超过系统限制，返回系统限制数量\n  </Col>\n  <Col sticky>\n    ### Request Example\n    <CodeGroup title=\"Request\" tag=\"GET\" label=\"/messages\" targetCode={`curl -X GET '${props.appDetail.api_base_url}/messages?user=abc-123&conversation_id=' \\\\\\n--header 'Authorization: Bearer {api_key}'`}>\n\n    ```bash {{ title: 'cURL' }}\n    curl -X GET '${props.appDetail.api_base_url}/messages?user=abc-123&conversation_id='\n    --header 'Authorization: Bearer {api_key}'\n    ```\n\n    </CodeGroup>\n\n    ### Python Request\n    <CodeGroup title=\"Python Request\" targetCode={`import requests\\n\\ndef query_messages(user, conversation_id, api_key):\\n    url = f'${props.appDetail.api_base_url}/messages?user={user}&conversation_id={conversation_id}'\\n    \\n    headers = {\\n        'Authorization': f'Bearer {api_key}'\\n    }\\n    \\n    response = requests.get(url, headers=headers)\\n    \\n    if response.status_code == 200:\\n        return response.json()\\n    else:\\n        return None, response.text\\n\\nif __name__ == \"__main__\":\\n    user = \"abc-123\"\\n    conversation_id = \"\"  # Provide an actual conversation ID if needed\\n    api_key = \"{api_key}\"  # Replace with your actual API key\\n    \\n    messages = query_messages(user, conversation_id, api_key)\\n    \\n    # Processing the response would go here, but no print statements are included\\n    # to ensure that __name__ == \"__main__\" does not produce output.\\n    \\n    # For demonstration purposes, let's print the result outside of the __main__ block.\\n    if messages:\\n        print(\"Success:\", messages)\\n    else:\\n        print(\"Request failed with error:\", messages[1])`}>\n      ```python\n      ```\n    </CodeGroup>\n\n\n    ### Response Example(基础助手)\n    <CodeGroup title=\"Response\">\n    ```json {{ title: 'Response' }}\n    {\n    \"limit\": 20,\n    \"has_more\": false,\n    \"data\": [\n        {\n            \"id\": \"a076a87f-31e5-48dc-b452-0061adbbc922\",\n            \"conversation_id\": \"cd78daf6-f9e4-4463-9ff2-54257230a0ce\",\n            \"inputs\": {\n                \"name\": \"dify\"\n            },\n            \"query\": \"iphone 13 pro\",\n            \"answer\": \"The iPhone 13 Pro, released on September 24, 2021, features a 6.1-inch display with a resolution of 1170 x 2532. It is equipped with a Hexa-core (2x3.23 GHz Avalanche + 4x1.82 GHz Blizzard) processor, 6 GB of RAM, and offers storage options of 128 GB, 256 GB, 512 GB, and 1 TB. The camera is 12 MP, the battery capacity is 3095 mAh, and it runs on iOS 15.\",\n            \"message_files\": [],\n            \"feedback\": null,\n            \"retriever_resources\": [\n                {\n                    \"position\": 1,\n                    \"dataset_id\": \"101b4c97-fc2e-463c-90b1-5261a4cdcafb\",\n                    \"dataset_name\": \"iPhone\",\n                    \"document_id\": \"8dd1ad74-0b5f-4175-b735-7d98bbbb4e00\",\n                    \"document_name\": \"iPhone List\",\n                    \"segment_id\": \"ed599c7f-2766-4294-9d1d-e5235a61270a\",\n                    \"score\": 0.98457545,\n                    \"content\": \"\\\"Model\\\",\\\"Release Date\\\",\\\"Display Size\\\",\\\"Resolution\\\",\\\"Processor\\\",\\\"RAM\\\",\\\"Storage\\\",\\\"Camera\\\",\\\"Battery\\\",\\\"Operating System\\\"\\n\\\"iPhone 13 Pro Max\\\",\\\"September 24, 2021\\\",\\\"6.7 inch\\\",\\\"1284 x 2778\\\",\\\"Hexa-core (2x3.23 GHz Avalanche + 4x1.82 GHz Blizzard)\\\",\\\"6 GB\\\",\\\"128, 256, 512 GB, 1TB\\\",\\\"12 MP\\\",\\\"4352 mAh\\\",\\\"iOS 15\\\"\"\n                }\n            ],\n            \"agent_thoughts\": [],\n            \"created_at\": 1705569239\n        }\n      ]\n    }\n    ```\n    </CodeGroup>\n\n    ### Response Example(智能助手)\n    <CodeGroup title=\"Response\">\n    ```json {{ title: 'Response' }}\n    {\n    \"limit\": 20,\n    \"has_more\": false,\n    \"data\": [\n        {\n            \"id\": \"d35e006c-7c4d-458f-9142-be4930abdf94\",\n            \"conversation_id\": \"957c068b-f258-4f89-ba10-6e8a0361c457\",\n            \"inputs\": {},\n            \"query\": \"draw a cat\",\n            \"answer\": \"I have generated an image of a cat for you. Please check your messages to view the image.\",\n            \"message_files\": [\n                {\n                    \"id\": \"976990d2-5294-47e6-8f14-7356ba9d2d76\",\n                    \"type\": \"image\",\n                    \"url\": \"http://127.0.0.1:5001/files/tools/976990d2-5294-47e6-8f14-7356ba9d2d76.png?timestamp=1705988524&nonce=55df3f9f7311a9acd91bf074cd524092&sign=z43nMSO1L2HBvoqADLkRxr7Biz0fkjeDstnJiCK1zh8=\",\n                    \"belongs_to\": \"assistant\"\n                }\n            ],\n            \"feedback\": null,\n            \"retriever_resources\": [],\n            \"created_at\": 1705988187,\n            \"agent_thoughts\": [\n                {\n                    \"id\": \"592c84cf-07ee-441c-9dcc-ffc66c033469\",\n                    \"chain_id\": null,\n                    \"message_id\": \"d35e006c-7c4d-458f-9142-be4930abdf94\",\n                    \"position\": 1,\n                    \"thought\": \"\",\n                    \"tool\": \"dalle2\",\n                    \"tool_input\": \"{\\\"dalle2\\\": {\\\"prompt\\\": \\\"cat\\\"}}\",\n                    \"created_at\": 1705988186,\n                    \"observation\": \"image has been created and sent to user already, you should tell user to check it now.\",\n                    \"message_files\": [\n                        \"976990d2-5294-47e6-8f14-7356ba9d2d76\"\n                    ]\n                },\n                {\n                    \"id\": \"73ead60d-2370-4780-b5ed-532d2762b0e5\",\n                    \"chain_id\": null,\n                    \"message_id\": \"d35e006c-7c4d-458f-9142-be4930abdf94\",\n                    \"position\": 2,\n                    \"thought\": \"I have generated an image of a cat for you. Please check your messages to view the image.\",\n                    \"tool\": \"\",\n                    \"tool_input\": \"\",\n                    \"created_at\": 1705988199,\n                    \"observation\": \"\",\n                    \"message_files\": []\n                }\n            ]\n        }\n        ]\n    }\n    ```\n    </CodeGroup>\n  </Col>\n</Row>\n\n---\n\n<Heading\n  url='/conversations'\n  method='GET'\n  title='获取会话列表'\n  name='#conversations'\n/>\n<Row>\n  <Col>\n    获取当前用户的会话列表，默认返回最近的 20 条。\n\n    ### Query\n\n    <Properties>\n      <Property name='user' type='string' key='user'>\n        用户标识，由开发者定义规则，需保证用户标识在应用内唯一。\n      </Property>\n      <Property name='last_id' type='string' key='last_id'>\n        当前页最后面一条记录的 ID，默认 null\n      </Property>\n      <Property name='limit' type='int' key='limit'>\n        一次请求返回多少条记录\n      </Property>\n      <Property name='pinned' type='bool' key='pinned'>\n        只返回置顶 true，只返回非置顶 false\n      </Property>\n    </Properties>"
}


def insert_str_after(search_str, insert_str, target_str, new_str):
    index_search = search_str.find(target_str)
    if index_search != -1:
        index_insert = search_str.find(target_str, index_search + len(target_str))
        if index_insert != -1:
            return search_str[:index_insert + len(target_str)] + insert_str + new_str + search_str[index_insert + len(target_str):]
    return search_str


def main(arg1, curls, mdx_string) -> dict:

    for i in range(len(arg1)):
        pythontext = arg1[i]
        pythontext = pythontext.replace('{props.appDetail.api_base_url}', '${props.appDetail.api_base_url}')
        pythontext = '<CodeGroup title="Python Request" targetCode={`' + pythontext + '`}>```python```</CodeGroup>'

        mdx_string = insert_str_after(mdx_string, curls[i], '</CodeGroup>', pythontext)

    return {
        "result": {
        "mdx_string": mdx_string,
        },
    }
print(main(result['arg1'],result['curls'],result['mdx_string']))